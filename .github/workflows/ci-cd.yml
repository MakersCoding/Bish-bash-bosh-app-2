name: CI/CD

on:
  # Choose your workflow strategy!
  pull_request:
    branches:
      - main

jobs:
  buildAndTest:
    name: CI Pipeline
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      DB_HOST: localhost
      POSTGRES_USER: test
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test_db
      AWS_DEFAULT_REGION: eu-west-2

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2

      - name: Set up PostgreSQL
        uses: Harmon758/postgresql-action@v1
        with:
          postgresql version: '13'
          postgresql db: ${{ env.POSTGRES_DB }}
          postgresql user: ${{ env.POSTGRES_USER }}
          postgresql password: ${{ env.POSTGRES_PASSWORD }}

      - name: Install Angular dependencies
        run: npm ci

      - name: Run Angular Tests
        run: npm run test:coverage

      - name: Install Express dependencies
        run: npm --prefix ./server ci

      - name: Run Linting
        run: npm --prefix ./server run lint 

      - name: Run Migration
        run: npm --prefix ./server run migrate

      - name: Run Express Tests
        run: npm --prefix ./server run coverage

  push:
    runs-on: ubuntu-latest
    needs: buildAndTest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bish-bash-bosh-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: push
    env:
      CONTAINER_REGISTRY_URL:  "https://eu-west-2.console.aws.amazon.com/ecr/repositories/private/664047078509/bish-bash-bosh-repo"
      CONTAINER_REPOSITORY_NAME: "bish-bash-bosh-repo"
      S3_DEPLOY_BUCKET: "bish-bash-bucket"
      ELASTIC_BEANSTALK_APP_NAME: "bish-bash-bosh-task-listing-app"
      ELASTIC_BEANSTALK_ENV_NAME: "bi-ba-bo-task-list-app-env"
      AWS_ACCOUNT_ID: "664047078509"
      AWS_REGION: "eu-west-2"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set permissions for create_dockerrun.sh
        run: chmod +x ./aws/create_dockerrun.sh

      - name: Create Dockerrun.aws.json
        run: ./create_dockerrun.sh
        working-directory: ./aws
        env:
          CONTAINER_REGISTRY_URL: ${{ env.CONTAINER_REGISTRY_URL }}
          CONTAINER_REPOSITORY_NAME: ${{ env.CONTAINER_REPOSITORY_NAME }}
          GITHUB_SHA: ${{ github.sha }}

      - name: List contents in the aws directory
        run: ls -lah ./aws/

      - name: Copy Dockerrun.aws.json to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "Copying Dockerrun.aws.json to S3"
          aws s3 cp "./aws/Dockerrun.aws.json" "s3://$S3_DEPLOY_BUCKET" --region eu-west-2

      - name: Deploy new application version to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}        
        run: |
            echo "Deploying new application version"
            echo "Creating application version:"
            aws elasticbeanstalk create-application-version \
              --application-name "$ELASTIC_BEANSTALK_APP_NAME" \
              --version-label "$GITHUB_SHA" \
              --source-bundle S3Bucket="$S3_DEPLOY_BUCKET",S3Key="Dockerrun.aws.json" \
              --no-auto-create-application \
              --region eu-west-2 \
              --debug
            echo "Updating environment:"
            aws elasticbeanstalk update-environment \
              --application-name "$ELASTIC_BEANSTALK_APP_NAME" \
              --environment-name "$ELASTIC_BEANSTALK_ENV_NAME" \
              --version-label "$GITHUB_SHA" \
              --region eu-west-2 \
              --debug
        shell: /usr/bin/bash -e {0}

